import { useContext, useState } from "react";
import { StyleSheet, KeyboardAvoidingView, Platform, Alert, Image } from "react-native";
import { useRouter } from "expo-router";
import { TextInput, Button, Card } from "react-native-paper";
import { loginService, loginInServiceToken } from "../../services/auth-service"; // ‡πÉ‡∏ä‡πâ loginServiceToken ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô
import { useEffect } from "react";
import { useNavigation } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { AuthStoreContext } from "@/contexts/AuthContext";

export default function LoginScreen() {
    const router = useRouter();
    const [userid, setUserid] = useState("");
    const [password, setPassword] = useState("");
    const navigation = useNavigation();
    const {onUpdateAuthData} = useContext(AuthStoreContext);
  
    useEffect(() => {
        navigation.setOptions({ headerShown: false });
    }, [navigation]);

    // const handleLogin = async () => {
    //     if (!userid.trim() || !password.trim()) {
    //         Alert.alert("‚ö†Ô∏è", "Please enter User ID and Password");
    //         return;
    //     }
    //     if (password.length < 2) {
    //         alert("‚ö†Ô∏è Password must be at least 2 characters long.");
    //         return;
    //     }

    //     const res = await loginService(userid, password);
    //     if (res?.success) {
    //         console.log("‚úÖ üîì ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å üè†");
    //         router.replace("/(tabs)");
    //         alert(`üîì Login Success! Welcomeüëèüíñ ${res.Userid}`);
    //     } else {
    //         Alert.alert("‚ùå Login Failed", "Invalid credentials");
    //     }
    // };

    const onSubmit = async (useToken: boolean) => {
        if (!userid.trim() || !password.trim()) {
          alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å User ID ‡πÅ‡∏•‡∏∞ Password");
          return;
        }
      
        if (password.length < 2) {
          alert("‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
          return;
        }
      
        console.log("üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà API:", { Userid: userid, Employeeid: password });
      
        const res = useToken
          ? await loginInServiceToken(userid, password)
          : await loginService(userid, password);
      
        console.log("üì© ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å API:", res);
      
        if (res?.success) {
          console.log("‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
          // update global isAuth is true
          
          //await onUpdateAuthData(); 

          router.replace("/(main)/(tabs)/(home)");
          console.log(`üéâ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${res.Userid}`);
          alert(`üéâ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${res.Userid}`);
          if (useToken) {
            console.log("üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token:", res.token);
            await AsyncStorage.setItem("token", res.token);
            console.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token:", await AsyncStorage.getItem("token"));
          }
        } else {
          Alert.alert("‚ùå Login Failed", "Invalid credentials");
        }
      };
      
    return (
        <KeyboardAvoidingView
            style={styles.container}
            behavior={Platform.OS === "ios" ? "padding" : "height"}
        >            
            {/* ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */}
            <Image source={require("@/assets/images/TPI-Polene-Logo.png")} style={styles.logo} />
            <Card style={styles.card}>
                <Card.Content>
                    <TextInput label="User ID" value={userid} onChangeText={setUserid} mode="outlined" />
                    <TextInput label="Password" secureTextEntry value={password} onChangeText={setPassword} mode="outlined" />
                    {/* <Button mode="contained" onPress={() => onSubmit(false)} style={[styles.button, { backgroundColor: '#3366FF'}]}>
                      LOGIN
                    </Button>
                    <Button mode="contained" onPress={() => onSubmit(true)}  style={[styles.button, { backgroundColor: '#3366FF'}]}> 
                      ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡πÉ‡∏ä‡πâ Token)
                    </Button> */}
                    <Button mode="contained" onPress={() => onSubmit(true)}  style={[styles.button, { backgroundColor: '#3366FF'}]}> 
                      Login üîë
                    </Button>
                </Card.Content>
            </Card>   
        </KeyboardAvoidingView>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, justifyContent: "center", alignItems: "center" },
    logo: { width: 100, height: 100, marginBottom: 20 }, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏î‡πâ
    card: { width: "90%", padding: 20 },
    button: { 
      marginTop: 10,
      width: 150,  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
      height: 40,  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
      left: 80,
      justifyContent: "center", // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
      alignItems: "center", // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
  }, 
});


function onUpdateAuthData() {
  throw new Error("Function not implemented.");
}
//npm install cors




//# No Token
// import { useState } from "react";
// import { View, StyleSheet, KeyboardAvoidingView, Platform, Alert, Image } from "react-native";
// import { useRouter } from "expo-router";
// import { TextInput, Button, Card } from "react-native-paper";
// import { loginService } from "../../services/auth-service";
// import { useEffect } from "react";
// import { useNavigation } from "expo-router";

// export default function LoginScreen() {
//     const router = useRouter();
//     const [userid, setUserid] = useState("");
//     const [password, setPassword] = useState("");

//     const navigation = useNavigation();

//     useEffect(() => {
//         navigation.setOptions({ headerShown: false });
//     }, [navigation]);


//     const handleLogin = async () => {
//         if (!userid.trim() || !password.trim()) {
//             Alert.alert("‚ö†Ô∏è", "Please enter User ID and Password");
//             return;
//         }
//         if (password.length < 2) {
//             alert("‚ö†Ô∏è Password must be at least 2 characters long.");
//             return;
//         }

//         const res = await loginService(userid, password);
//         if (res?.success) {
//             console.log("‚úÖ üîì ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å üè†");
//             router.replace("/(tabs)");
//             alert(`üîì Login Success! Welcomeüëèüíñ ${res.Userid}`);
//         } else {
//             Alert.alert("‚ùå Login Failed", "Invalid credentials");
//         }
//     };

//     return (
//         <KeyboardAvoidingView
//             style={styles.container}
//             behavior={Platform.OS === "ios" ? "padding" : "height"}
//         >
//             {/* ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */}
//             <Image source={require("@/assets/images/TPI-Polene-Logo.png")} style={styles.logo} />

//             <Card style={styles.card}>
//                 <Card.Content>
//                     <TextInput label="User ID" value={userid} onChangeText={setUserid} mode="outlined" />
//                     <TextInput label="Password" secureTextEntry value={password} onChangeText={setPassword} mode="outlined" />
//                     <Button mode="contained" onPress={handleLogin} style={styles.button}>LOGIN</Button>
//                 </Card.Content>
//             </Card>
//         </KeyboardAvoidingView>
//     );
// }

// const styles = StyleSheet.create({
//     container: { flex: 1, justifyContent: "center", alignItems: "center" },
//     logo: { width: 150, height: 150, marginBottom: 20 }, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏î‡πâ
//     card: { width: "90%", padding: 20 },
//     button: { marginTop: 10 },
// });
