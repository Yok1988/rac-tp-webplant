import axios from 'axios';
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as SecureStore from 'expo-secure-store';
import { jwtDecode } from "jwt-decode"; // ‚úÖ

const API_URL = 'http://192.168.3.7:4000/users-tp'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

//#‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Token login Login Without Token
export const loginService = async (userid: string, password: string) => {
    try {
        const response = await axios.post(API_URL, { Userid: userid, EMployeeid: password }); 
        return response.data;
    } catch (error) {
        throw error;
    }
};

//#Token Login With Token
export const loginInServiceToken = async (userid: string, password: string) => {
    try {
        const response = await fetch("http://192.168.3.7:4000/login", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ Userid: userid, password: password }),
        });

        console.log("üì° Request Body:", JSON.stringify({ Userid: userid, password: password }));

        if (!response.ok) {
            console.error("‚ùå HTTP Error:", response.status);
            return { success: false, message: `HTTP Error: ${response.status}` };
        }

        const data = await response.json();
        console.log("‚úÖ Login Success:", data);

        if (data.success) {
            await SecureStore.setItemAsync("token", data.token);
            return { success: true, token: data.token, Userid: data.Userid };
        }

        return { success: false, message: "Invalid credentials" };
    } catch (error) {
        console.error("‚ùå Login Error:", error);
        return { success: false, message: "Network Error" };
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
export const isTokenExpired = async () => {
    const token = await SecureStore.getItemAsync('token'); 
    if (!token) return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ Token = ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß

    try {
        const decoded: any = jwtDecode(token);
        const now = Math.floor(Date.now() / 1000); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        return decoded.exp < now; // ‡∏ñ‡πâ‡∏≤ exp < ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô = ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    } catch (error) {
        console.error("üö® Invalid Token:", error);
        return true; // Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á = ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    }
};

// ‡∏î‡∏∂‡∏á Token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å SecureStore
export const getToken = async () => {
    return await SecureStore.getItemAsync('token');
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (‡∏•‡∏ö Token)
export async function logoutService() {
    await SecureStore.deleteItemAsync('token');
    console.log("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß!");
}

//# ‡πÉ‡∏ä‡πâ SecureStore ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Login
export async function loginServiceTP(userid: string, password: string) {
    try {
        const res = await axios.post('http://192.168.3.7:4000/login', {
            userid: userid,
            password: password,
        });

        await SecureStore.setItemAsync('token', res.data.token);
        console.log("üü¢üü¢ Login:", res.data.token);
    } catch (error) {
        throw error;
    }
}

//#‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Token login Login Without Token
export const getProfileService = async () => {
    try {
        let token: any;
    
        const tokenString = await SecureStore.getItemAsync('token');
        if (tokenString) {
          token = JSON.parse(tokenString);
        }
        
        const res = await axios.get('http://192.168.3.7:4000/users', {
          headers: {
            Authorization: 'Bearer ' + token.access_token,
          },
        });
        return res;
      } catch (error) {
        throw error; // 401
      }
};



// //#‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Token login Login Without Token
// import axios from 'axios';
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import * as SecureStore from 'expo-secure-store';
// const API_URL = 'http://192.168.3.7:4000/login-erp'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// //#Token Login With out no Token
// export const loginService = async (userid: string, password: string) => {
//     try {
//         const response = await axios.post(API_URL, { Userid: userid, EMployeeid: password }); 
//         return response.data;
//     } catch (error) {
//         throw error;
//     }
// };

// //#Token Login With Token
// export const loginInServiceToken = async (userid: string, password: string) => {
//     try {
//       const response = await fetch("http://192.168.3.7:4000/login", { // ‡πÉ‡∏ä‡πâ IP ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô Postman
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({ Userid: userid, password: password }),
//       });
  
//       console.log("üì° Request Body:", JSON.stringify({ Userid: userid, password: password }));
  
//       if (!response.ok) {
//         console.error("‚ùå HTTP Error:", response.status);
//         return { success: false, message: `HTTP Error: ${response.status}` };
//       }
  
//       const data = await response.json();
//       console.log("‚úÖ Login Success:", data);
  
//       if (data.success) {
//         await AsyncStorage.setItem("token", data.token);
//         return { success: true, token: data.token,Userid: data.Userid };
//       }
  
//       return { success: false, message: "Invalid credentials" };
//     } catch (error) {
//       console.error("‚ùå Login Error:", error);
//       return { success: false, message: "Network Error" };
//     }
//   };

// export const loginToken = async (userid: string, password: string) => {
//     try {
//         const response = await fetch("http://192.168.3.7:4000/login", {
//             method: "POST",
//             headers: { "Content-Type": "application/json" },
//             body: JSON.stringify({ Userid: userid, password: password }),
//         });
        
//         // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
//       console.log("üìå Request Body:", JSON.stringify({ Userid: userid, password: password }));
//         const data = await response.json();
//         if (data.success) {
//             console.error("üü¢üü¢ Login :", data.token);
//             await AsyncStorage.setItem("token", data.token);
//             const storedToken = await AsyncStorage.getItem("token");
//             console.log("‚úÖ Token in AsyncStorage:", storedToken);
//             return data;
//         }
//         return { success: false };
//     } catch (error) {
//         console.error("‚ùå Login Error:", error);
//         return { success: false };
//     }
// };

// export async function loginServiceTP(userid: string, password: string) {
//     try {
//       const res = await axios.post('http://192.168.3.7:4000//login', {
//         userid: userid,
//         password: password,
//       });
//       await SecureStore.setItemAsync('token', JSON.stringify(res.data));
//       console.error("üü¢üü¢ Login :", res.data.token);
//     } catch (error) {
//       throw error;
//     }
//   }

// export async function logoutService() {
//     await SecureStore.deleteItemAsync('token');
//     await AsyncStorage.removeItem('token');
//   }